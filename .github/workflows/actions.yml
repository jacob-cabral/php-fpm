name: Semantic Versioning and Helm Chart Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Semantic Release and Attach Helm Chart to GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js (required for semantic-release)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Run Semantic Release to determine the version
      - name: Run Semantic Release (Version Check)
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run | tee release_output.txt
          echo "NEW_VERSION=$(grep -oP '(?<=The next release version is )\S+' release_output.txt)" >> $GITHUB_ENV

      # Update Chart.yaml with the new version
      - name: Update Helm Chart version
        run: |
          sed -i "s/^version: .*/version: ${{ env.NEW_VERSION }}/" Chart.yaml

      # Commit updated Chart.yaml
      - name: Commit updated Chart.yaml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Chart.yaml
          git commit -m "chore: update Chart.yaml version to ${{ env.NEW_VERSION }}"
          git push origin main

      # Create GitHub tag with Semantic Release
      - name: Run Semantic Release (Tag Creation)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release > release_output.txt
          echo "RELEASE_URL=$(grep -oP '(?<=Published GitHub release: )\S+' release_output.txt | head -n 1)" >> $GITHUB_ENV

      # Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      # Package the Helm Chart
      - name: Package Helm Chart
        id: package_helm_chart
        run: |
          helm lint
          helm package . --destination dist

      # Get the repository name dynamically
      - name: Extract repository name
        run: echo "REPOSITORY_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      # Attach Helm Chart package as a release asset
      - name: Upload Helm Chart as Release Asset
        uses: actions/upload-artifact@v4
        with:
          upload_url: ${{ env.RELEASE_URL }}
          path: dist/${{ env.REPOSITORY_NAME }}-${{ env.NEW_VERSION }}.tgz
          name: ${{ env.REPOSITORY_NAME }}-${{ env.NEW_VERSION }}.tgz
          if-no-files-found: error
